1.下载和安装
2.使用
3.作用
	服务器编程
	模块化机制
4.模块化机制
5.内置模块
	由node本身提供，使用之前无需安装
6.第三方模块
	mysql
		安装
		导入
		创建连接对象
		数据库操作
		关闭链接
	express
	
	npm（安装node时带有npm）
		1.查看npm配置
			npm config list      http://registry.npmjs.org; （注册中心）
		2.安装cnpm
			npm install cnpm -g --registry=http://registry.npmjs.taobao.org; 
			临时指定去哪个注册中心下载cnpm.默认是去国外的官网下载cnpm(比较慢)，现在指定它去淘宝仓库的注册中心(镜像)去下载cnpm
		
			*权限拒绝
			使用-g全局安装npm的模块都会默认安装到/usr/local目录，但是该目录默认是root的，不能被briup使用。所以需要把这个目录的权限给briup
			在执行安装命令之前应该执行以下操作：
			sudo chown -R &（whoami）&(npm config get confix)/{lib/node_modules,bin,share}
			sudo chown -R briup (/usr/local)/{lib/node_modules,bin,share}这句话其实就是把这三个目录的root都该为briup,如下：
				sudo chown -R briup /usr/local/lib/node_moduels
				sudo chown -R briup /usr/local/bin
				sudo chown -R briup /usr/local/share
		
			npm config get confix 表示的是用npm进行全局安装时会默认安装到config get confix（/usr/local）目录中。
			
			安装完毕之后可用cnpm config list查看配置 默认是去淘宝镜像的注册中心去下载；而npm则是去官网上下载。两者都属于公共的仓库
	
		3.私有仓库 sinopia
			
		*规则：	指定npm的注册中心（下载地址）为本地sinopia仓库
			如果本地仓库没有，则会向默认的注册中心下载，（默认是外网仓库的注册中心）
				也可以把外网的注册中心更改为国内淘宝镜像，如此下载速度会提升。
			下载成功后会在本地备份一份，当第二次下载时就不用连外网下载（本地仓库已有备份）

		*	安装
				1.全局安装cnpm install sinopia -g
				2.启动 sinopia    (在进行安装时必须启动sinopia,否则不能在本地sinopia注册中心中找) 
					查看配置信息 并修改默认的注册中心地址（默认是外网仓库）为淘宝镜像；
					自己的仓库地址 http://localhost:4873/
				3.修改配置文件	
					配置文件 /home/briup/.config/sinopia/config.yaml; 把22行的url改变为镜像的地址
					
				4.启动sinopia
				5.将npm的默认注册中心改为本地的sinopia地址
					npm set registry=http://localhost:4873/
					
		*加-g和不加-g的区别
			-g是安装到系统中的，可以直接用命令启动的模块,比如cnpm sinopia 等。
			不加-g是会在当前目录中新建一个node_modules文件夹，不用-g的，安装的依赖模块都会在这个文件夹中
		*配置之后的npm和cnpm区别
			cnpm 会去淘宝镜像的注册中心下载
			cnpm
			    $npm install -g cnpm --registry=https://registry.npm.taobao.org
			    $cnpm install mysql
				默认到taobao注册中心下载

			npm
			    $npm install <package>
				默认到官方注册中心下载依赖的模块(为经过配置的)
				registry.npmjs.org  
			npm （经过配置的）会先在本地sinopia中找（如果原先有通过npm下载过,就会有备份，即可以被下载），找到则下载，找不到则去淘宝镜像中下载，
		*把注册中心地址该为服务器地址，也可以实现服务器中的模块下载

		４．使用npm命令创建一个模块

			1）. npm init
			    初始化模块
			    $ npm init -y　（加-y就是默认的，不需要自定义配置的）
			2）. npm install
			    $ npm install <package>
				    将指定package安装到当前目录的node_modules
			    $ npm install <package> -g
				    全局安装，将模块安装到/usr/local目录，可以在命令行中使用指定命令调用模块。
			　　　　$ npm install （必须是配置文件中有depencecies属性和依赖包，也就是说先要进行安装模块，之后删除了或者拷贝给别人时可使用该命令下载依赖；也可以自己手动写配置文件的依赖属性）
				　　安装配置文件中dependecies中所有的依赖包

			3）. npm publish <package>
				    发布某个模块，发布之前先进行登录
				　　　　登录：先使用npm adduser 用户名   创建用户；
					　　再到http://localhost:4873登录用户名和密码
					 　最后执行发布操作　npm publish 模块名
			4）. npm unpublish <package>@<version>
			    $ npm unpublish hello@1.0.0　　　卸载某个模块

			

			
		５．sinopia:（一个服务）端口为4873
		    服务开启后，在地址中输入localhost:4873即可看到服务

		    $npm set registry=http://localhost:4873
		    $cnpm install sinopia -g
		    $sinopia
		    启动后找到配置文件所在
			~/.config/sinopia/config.yaml
		    修改配置文件
			url:淘宝注册中心
		    $sinopia

		    $npm install mysql
			
			npm init 
                 会创建  package.json文件
			    name:
			    version:
			    main: index.js
			    script:{
				"test":"node index.js"
			    },
			    dependencies:{
				依赖关系
			    }
			    $ npm init
				初始化package.json配置文件
			    $ npm run test;

7.express
    第三方模块
    １．安装
        npm install express
    2. 使用
        var express = require('express');
        var app = express();
        //定义单个路由
        app.get("/students",function(req,resp){
            //获取ｇｅｔ方式提交的参数
            req.query
        });
        //
        app.post("/students",function(req,resp){
            //获取post方式提交的参数
            //1. 使用原生的事件监听方式获取参数
            //2. 使用第三方的中间件
                安装
                    npm install body-parser
                加载
                    var bodyParser = require('body-parser');
                应用
                    app.use(bodyParser.urlencoded({extended:true})
        });
    3. 使用express脚手架构建express项目
        $ npm install express-generator -g
        $ express 项目名
		默认会创建一系列的目录和文件（模板）
		npm run start

mvc模式和mvvm模式？？？？？
画图？？？？

作业
    使用express模块完成以下服务
    需要配合mysql模块
    1．查询所有课程(get)
        url     /courses
        param   无
        return  [{id,name,credit}]
    2. 通过id查询课程(get)
        url     /courses/queryById
        param   id=1
        return  {id,name,credit}
    3. 通过id删除课程信息(get)
        url     /courses/deleteById
        param   id=1
        return  {msg:'success'}/{msg:'error'}
    4. 修改(post)
        url     /courses/update
        param   {id,name,credit}
        return  {id,name,credit}
    5. 保存(post)
        url     /courses/save
        param   {id,name,credit}
        return  {msg:'success'}/{msg:'error'}

    1．查询所有学生(get)
        url     /students
        param   无
        return  [{id,name,gender,birth}]
    2. 通过id查询课程(get)
        url     /students/findById
        param   id=1
        return  {id,name,gender,birth}
    3. 通过id删除课程信息(get)
        url     /students/deleteById
        param   id=1
        return  {msg:'success'}/{msg:'error'}
    4. 修改(post)
        url     /students/update
        param   {id,name,gender,birth}
        return  {id,name,gender,birth}
    5. 保存(post)
        url     /students/save
        param   {id,name,gender,birth}
        return  {msg:'success'}/{msg:'error'}

		









